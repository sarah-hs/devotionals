{"version":3,"sources":["components/Tab.js","App.js","components/Tabs.js","reportWebVitals.js","index.js"],"names":["Tab","onClick","props","label","this","activeTab","className","Component","SegmentedControl","require","App","React","createClass","getInitialState","color","render","onChange","colorUpdated","value","state","name","style","background","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2OA0CeA,E,4MA/BbC,QAAU,WAAO,IAAD,EACa,EAAKC,MAAxBC,EADM,EACNA,OACRF,EAFc,EACCA,SACPE,I,uDAGA,IAENF,EAKEG,KALFH,QAFK,EAOHG,KAJFF,MACEG,EAJG,EAIHA,UACAF,EALG,EAKHA,MAIAG,EAAY,gBAMhB,OAJID,IAAcF,IAChBG,GAAa,oBAIb,oBACEA,UAAWA,EACXL,QAASA,EAFX,SAIGE,Q,GAhCSI,aCyEdC,GCzEeD,Y,MDyEIE,EAAQ,KA6BhBC,EA3BLC,IAAMC,YAAY,CAAC,YAAD,MAE1BC,gBAF0B,WAGxB,MAAO,CACLC,MAAO,QAGXC,OAP0B,WAQxB,OACE,gCACE,eAACP,EAAD,CACEQ,SAAUZ,KAAKa,aACfC,MAAOd,KAAKe,MAAML,MAClBM,KAAK,QAHP,UAIE,sBAAMF,MAAM,MAAZ,iBACA,sBAAMA,MAAM,OAAZ,qBAEF,qBAAKZ,UAAU,aAAae,MAAO,CAACC,WAAYlB,KAAKe,MAAML,aAKjEG,aAtB0B,SAsBbC,GACXd,KAAKmB,SAAS,CAACT,MAAOI,OE1FXM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7921d5c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass Tab extends Component {\n  static propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  }\n\n  render() {\n    const {\n      onClick,\n      props: {\n        activeTab,\n        label,\n      },\n    } = this;\n\n    let className = 'tab-list-item';\n\n    if (activeTab === label) {\n      className += ' tab-list-active';\n    }\n\n    return (\n      <li\n        className={className}\n        onClick={onClick}\n      >\n        {label}\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","//import './App.css';\n//import axios from 'axios';\n//import { useEffect, useState } from 'react';\n//\n//function App() {\n//    const [devotional, setDevotional] = useState(undefined);\n//    const [isLoaded, setIsLoaded] = useState(false);\n//    const [error, setError] = useState(undefined);\n//\n//    useEffect(() => {\n//        axios.get('https://devotionals-api.herokuapp.com/api/v1/devotionals/today')\n//        .then(({data}) => setDevotional(data[0]))\n//        .catch((err) => setError(err))\n//        .finally(() => setIsLoaded(true));\n//    }, []);\n//\n//    if(error)\n//        return (\n//            <div className=\"App\">\n//                <h1>An error ocurred</h1>\n//                <p>Error: {error.message}</p>\n//            </div>\n//        );\n//    else if(!isLoaded)\n//        return (\n//            <div className=\"App\">\n//                <h1 className=\"loading\">Loading...</h1>\n//            </div>\n//        );\n//    else\n//        return (\n//            <div className=\"App\">\n//                <Devotional data={devotional} />\n//            </div>\n//        );\n//}\n//\n//function Devotional({data}) {\n//    return (\n//        <div className=\"devotional\">\n//            <h1 className=\"title\">{data.title}</h1>\n//            <p className=\"date\">{data.date}</p>\n//            <p className=\"vers\">{data.vers}</p>\n//            <div className=\"content\">\n//                {data.content.map((p, i) => <p key={i}>{p}</p>)}\n//            </div>\n//        </div>\n//    )\n//}\n\n\nimport React from 'react';\nimport Tabs from \"./components/Tabs\";\nimport './App.css';\n//\n//function App() {\n//  return (\n//      <div>\n//        <h1>Tabs Demo</h1>\n//          <Tabs>\n//             <div label=\"Gator\">\n//               See ya later, <em>Alligator</em>!\n//             </div>\n//             <div label=\"Croc\">\n//               After 'while, <em>Crocodile</em>!\n//             </div>\n//             <div label=\"Sarcosuchus\">\n//               Nothing to see here, this tab is <em>extinct</em>!\n//             </div>\n//           </Tabs>\n//      </div>\n//  );\n//}\n\n\n\n\nvar SegmentedControl = require('react-segmented-control');\n\nvar App = React.createClass({\n\n  getInitialState() {\n    return {\n      color: 'red'\n    };\n  },\n  render() {\n    return (\n      <div>\n        <SegmentedControl\n          onChange={this.colorUpdated}\n          value={this.state.color}\n          name=\"color\">\n          <span value=\"red\">Red</span>\n          <span value=\"blue\">Blue</span>\n        </SegmentedControl>\n        <div className='background' style={{background: this.state.color}} />\n      </div>\n    );\n  },\n  \n  colorUpdated(value) {\n    this.setState({color: value});\n  }\n});\n\nexport default App;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Tab from './Tab';\n\nclass Tabs extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTabItem = (tab) => {\n    this.setState({ activeTab: tab });\n  }\n    render() {\n      const {\n        onClickTabItem,\n        props: {\n          children,\n        },\n        state: {\n          activeTab,\n        }\n      } = this;\n\n      return (\n        <div className=\"tabs\">\n          <ol className=\"tab-list\">\n            {children.map((child) => {\n              const { label } = child.props;\n\n              return (\n                <Tab\n                  activeTab={activeTab}\n                  key={label}\n                  label={label}\n                  onClick={onClickTabItem}\n                />\n              );\n            })}\n          </ol>\n          <div className=\"tab-content\">\n            {children.map((child) => {\n              if (child.props.label !== activeTab) return undefined;\n              return child.props.children;\n            })}\n          </div>\n        </div>\n      );\n    }\n  }\n\n\nexport default Tabs;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}